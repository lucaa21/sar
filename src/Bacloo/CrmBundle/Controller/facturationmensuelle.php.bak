<?php
use Bacloo\CrmBundle\Entity\Afacturer;
use Bacloo\CrmBundle\Entity\Factures;
use Bacloo\CrmBundle\Entity\Locataclone;
use Bacloo\CrmBundle\Entity\Locationsclone;
use Bacloo\CrmBundle\Entity\Locationsslclone;
use Bacloo\CrmBundle\Entity\Locataventesclone;

// $debutmois = new DateTime("first day of last month");
// $finmois = new DateTime("last day of last month");
// OU
$debutmoisinit = date('Y-m-01', strtotime(" -1 month"));//Debut mois précédent	
$debutmois = date('Y-m-01', strtotime(" -1 month"));//Debut mois précédent	
// $finmois = date('Y-m-t', strtotime(" -1 month"));//Fin mois précédent
			// $debutmois = new DateTime("first day of last month");echo $debutmois->format('Y-m-d');			
			$finmoisinit = date('Y-m-d');
			$today = date('Y-m-d');

			// $debutmois = date('Y-m-01');
			$debutmoissecinit = strtotime($debutmoisinit);
			$debutmoissec = strtotime($debutmoisinit);
			$finmoissecinit = strtotime ($finmoisinit);			
			$em = $this->getDoctrine()->getManager();
			
			$qrcode = 0;
				//On récupère les codes contrats à facturer afin de faire une boucle
				//Pour cela on recherche les locations et locationssl avec une fin de loc > à la fin du mois
				//On les met dasn un tableau
				$locatatot = $em->getRepository('BaclooCrmBundle:Locata')
							->locationsafacturer($debutmoisinit, $finmoisinit);
// print_r($locatatot);							
				$vendatot = $em->getRepository('BaclooCrmBundle:Venda')
							->ventesafacturer($debutmoisinit, $finmoisinit);
							
				$achatstot = $em->getRepository('BaclooCrmBundle:Locatafrs')
							->achatsafacturer($debutmoisinit, $finmoisinit);
				//On fait ensuite une boucle sur les id de locata puis à l'intérieur de celle ci
				//on fait tourner une boucle sur les locations et locationssl en reprenant le principe de
				//la facturation définitive
				
				//DEBUT DE LA FACTURATION MENSUELLE
				foreach($locatatot as $locatas)
				{
					//Partie locations			
					$locata = $em->getRepository('BaclooCrmBundle:Locata')
								->findOneById($locatas['f_id']);
					// echo $locatas['f_client'];
					//Combien de locations sur ce contrats
					$nbloca = 0;
					foreach($locata->getLocations() as $loca)
					{
						$nbloca++;
					}
					//Combien de locationssl sur ce contrats
					$nblocasl = 0;
					foreach($locata->getLocationssl() as $loca)
					{
						$nblocasl++;
					}
					//Nombre de location total sur le contrat
					$nblocs = $nbloca + $nblocasl;
					
					//Déterminons combien de locations terminées sur le contrat
					$nblocater = 0;
					foreach($locata->getLocations() as $loca)
					{
						if($loca->getEtatloc() == 'Location terminée')
						{
							$nblocater++;
						}
					}
					//Combien de locationssl teminées sur ce contrats
					$nblocatersl = 0;
					foreach($locata->getLocationssl() as $loca)
					{
						if($loca->getEtatloc() == 'Location terminée')
						{
							$nblocatersl++;
						}
					}
					//Nombre de loc total terminées sur le contrat
					$nblocters = $nblocater + $nblocatersl;
					$moisder = 0;
					$touter = 0; //Toutes les loc du contrat sont terminées
					if($nblocters == $nblocs)//Si le nb de lcoations terminées est = au nb de lcoations total du contrat on peut facturer tout
					{
						$touter = 1;
						$finmois = date('Y-m-d');//echo $finmois;
						$finmoissec = strtotime($finmois);
					}
					else //Si loc total différent de loc terminées total
					{
						//on vérifie alors si des loc et locsl en cours ont démarrées le mois dernier
						//S'il y en a pas, attendre la fin du mois pour la compta ou que la loc soit terminée
						
						foreach($locata->getLocations() as $loca)
						{//echo 'CCCCCCCC';

							if(strtotime($loca->getDebutloc()) < strtotime(date('Y-m-01')) and strtotime($loca->getFinloc()) > strtotime(date('Y-m-01')) )
							{
								$moisder++;
								$finmois = date('Y-m-t', strtotime(" -1 month"));//Fin mois précédent
								$finmoissec = strtotime ($finmois);
							}
						}
						foreach($locata->getLocationssl() as $loca)
						{
							if(strtotime($loca->getDebutloc()) < strtotime(date('Y-m-01')) and strtotime($loca->getFinloc()) > strtotime(date('Y-m-01')))
							{
								$moisder++;
								$finmois = date('Y-m-t', strtotime(" -1 month"));//Fin mois précédent
								$finmoissec = strtotime ($finmois);
							}
						}
					}	

					$locataclonedeja = $em->getRepository('BaclooCrmBundle:Locataclone')
								->findBy(array('oldid' => $locatas['f_id']));
					$ii = 0;
					foreach($locataclonedeja as $loco)
					{
						$time=strtotime($loco->getDatemodif());
						$moisclone=date("F",$time);
						$anneeclone=date("Y",$time);
						
						$moiscourant=date("F");
						$anneecourante=date("Y");
						if($moisclone == $moiscourant && $anneeclone == $anneecourante)
						{
							$ii++;
						}
					}
					$locataclonedeja2 = $em->getRepository('BaclooCrmBundle:Locataclone')
								->findBy(array('oldid' => $locatas['f_id'], 'datemodif' => $locatas['f_datemodif'], 'montantloc' => $locatas['f_montantloc']));
								
					if((empty($locataclonedeja2) && $ii == 0 && $moisder > 0) || (empty($locataclonedeja2) && $touter == 1))//si au moins une loc démarrée mois dernier et pas de cloone pour ce mois-ci
					{//echo '>>>>>'.$locata->getId().'<<<<<';
						//clonage et copie locata
						$oldLocata = $locata;
						$newLocata = new Locataclone();
						$oldReflection = new \ReflectionObject($oldLocata);
						$newReflection = new \ReflectionObject($newLocata);
// echo '11111';

						foreach ($oldReflection->getProperties() as $property) {
							if ($newReflection->hasProperty($property->getName())) {
								$newProperty = $newReflection->getProperty($property->getName());
								$newProperty->setAccessible(true);
								$newProperty->setValue($newLocata, $property->getValue($oldLocata));
							}
						}
						$newLocata->setOldid($oldLocata->getId());
						$em->persist($newLocata);
						$em->flush();
// echo '22222';
// echo '33333';						

						$totalht = 0;
						$transport = 0;	
						$totaltrspaller = 0;
						$totaltrspretour = 0;
						$jour50 = 0;
						$jour100 = 0;
						$montantcarb = 0;
						$premiermois = 0;
						$contributionverte = 0;
						$assurance = 0;								
						foreach($locata->getLocations() as $loca)
						{

							if(($loca->getEtatloc() == 'En location' and strtotime($loca->getDebutloc()) < strtotime(date('Y-m-01'))) or ($loca->getEtatloc() == 'Location terminée' ))
							{
// echo '555';								
								$locationsclonedeja = $em->getRepository('BaclooCrmBundle:Locationsclone')
									->findOneBy(array('oldid' => $loca->getId(), 'etatloc' => 'Location terminée', 'codemachineinterne' => $loca->getCodemachineinterne()));								
								if($loca->getEtatloc() == 'Location terminée' && !empty($locationsclonedeja))
								{}
								else
								{
									$finloc = strtotime ($loca->getFinloc());	
									$finlocsec = strtotime ($loca->getFinloc());	
									$dStart = $loca->getDebutloc();
									$dStartsec = strtotime ($loca->getDebutloc());
									$dEnd = $loca->getFinloc();
// echo 'xxxxxxxxxxxxxxxxx';echo $finmois; echo $loca->getFinloc();

									//Si date début antérieure au début du mois >> date début = début mois
									if($dStartsec <= $debutmoissec)
									{

										$dStart = $debutmois;






























									}
									//Si date fin posterieure à fin du mois >> date fin = fin mois
									if($finlocsec >= $finmoissec)
									{
										if($loca->getEtatloc() == 'Location terminée')
										{echo 'ici';
											$dEnd = $loca->getFinloc();
											$finmois = $loca->getFinloc();
											$finmoissec = strtotime ($finmois);
										}




										else
										{echo 'LAAAA';

























											if($loca->getEtatloc() == 'En location')






























































											{
												$finmois = date('Y-m-t', strtotime(" -1 month"));//Fin mois précédent
												$finmoissec = strtotime ($finmois);
											}											
											$dEnd = $finmois;







										}
									}



















































































									//Si date début après début de mois alors $dstart = $dstart on ne fait rien.
									
									//1.Récupérer les données de la table Locata cf supra
										   
									//2.On génère les entêtes de colonnes à partir de la fonction createplanning

									//on calcule le nombre de jours de location
									// echo $loca->getEntreprise();//echo $dStart;echo $dEnd;									
									// $begin = new DateTime($dStart);
									$begin = new DateTime($dStart);
									$end = new DateTime($dEnd);
									$end = $end->modify( '+1 day' ); 

									$interval = DateInterval::createFromDateString('1 day');
									$period = new DatePeriod($begin, $interval, $end);
									$nbjloc = 0;
									$nbjlocass = 0;

									foreach ($period as $dt) {
										$newformat = $dt->format("D");
										$nbjlocass++;
										if($locata->getFacturersamedi() == 1 && $newformat == 'Sat')

										{
											$nbjloc++;

										}
										elseif($locata->getFacturerdimanche() == 1 && $newformat == 'Sun')
										{
											$nbjloc++;
										}
										elseif($newformat == 'Sat' or $newformat == 'Sun')
										{}
										else
										{
											$nbjloc++;
										}							
									}	

// echo 'laa';		echo 'nbjloc'.$nbjloc;					
									//clonage et copie locations	
									// $locatio  = $em->getRepository('BaclooCrmBundle:Locations')		
									   // ->findOneByCodemachineinterne($ecode);
									// $assurancela =($nbjlocass/$loca->getNbjloc())*$loca->getAssurance(); 


									$locations = new Locationsclone;
									$locations->setCodeclient($loca->getCodeclient());
									$locations->setEntid($loca->getCodeclient());
									$locations->setEntreprise($loca->getEntreprise());
									$locations->setMachineid($loca->getMachineid());
									$locations->setCodemachine($loca->getCodemachine());
									$locations->setCodemachine($loca->getCodemachine());
									$locations->setCodemachineinterne($loca->getCodemachineinterne());
									$locations->setTypemachine($loca->getTypemachine());
									$locations->setTypemachineinit($loca->getTypemachineinit());
									$locations->setEtatloc($loca->getEtatloc());
									$locations->setLoyerp1($loca->getLoyerp1());
									$locations->setLoyerp2($loca->getLoyerp2());
									$locations->setLoyerp3($loca->getLoyerp3());
									$locations->setLoyerp4($loca->getLoyerp4());
									$locations->setLoyermensuel($loca->getLoyermensuel());
									$locations->setNbjloc($nbjloc);
									$locations->setNbjlocass($nbjlocass);
									
									if(empty($loca->getNbjloc()) or $loca->getNbjloc() == 0){$locnbjloc = 1;}else{$locnbjloc = $loca->getNbjloc();}
									$loyer = ($loca->getMontantloc()/$locnbjloc);
									// $totalht += $loyer*$nbjloc;
									$locations->setMontantloc($loyer*$nbjloc);
									
									$locations->setLitrescarb($loca->getLitrescarb());
									$locations->setMontantcarb($loca->getMontantcarb());
									$locations->setEnergie($loca->getEnergie());
									$locations->setDatereprise($loca->getDatereprise());
									if($loca->getEtatloc() == 'En location' && strtotime($loca->getDebutloc()) < $debutmoissecinit)
									{
										$locations->setDebutloc($debutmoisinit);
									}
									else
									{
										$locations->setDebutloc($loca->getDebutloc());
									}
									
									if($loca->getEtatloc() == 'En location' && strtotime($loca->getFinloc()) >= date('Y-m-01'))
									{
										$locations->setFinloc(date('Y-m-t', strtotime(" -1 month")));
									}
									else
									{


										$locations->setFinloc($loca->getFinloc());
									}								


									if($loca->getDebutloc() >= $debutmois && $loca->getDebutloc() <= $finmois)
									{

										$locations->setTransportaller($loca->getTransportaller());
										$totaltrspaller += $loca->getTransportaller();
										$premiermois++;
									}
									
									if($loca->getFinloc() >= $debutmois && $loca->getFinloc() <= $finmois)
									{
										$locations->setTransportretour($loca->getTransportretour());
										$totaltrspretour += $loca->getTransportretour();
									}
									




									$locations->setContributionverte($loca->getContributionverte());
									if($loca->getContributionverte() == 1)
									{
										$contributionverte += $loyer * $nbjloc *0.025;//$contributionverte += $loyer*$nbjloc*0.0215;
									}
									else
									{
										$contributionverte += 0;
									}
									


									$locations->setAssurance($loca->getAssurance());
									if($loca->getAssurance() == 1)
									{
										$assurance += $loyer*$nbjlocass*0.10;
									}
									else
									{
										$assurance = 0;
									}
									
									$locations->setJour50($loca->getJour50());
									$locations->setJour100($loca->getJour100());
									$locations->setOldid($loca->getId());
									$locations->addLocataclone($newLocata);
									$newLocata->addLocationsclone($locations);
									$em->persist($locations);	
									$em->persist($newLocata);
									$em->flush();
									
									







											//Création du montant HT ligne par ligne
											
											if(null !== $loca->getLoyerp1())
											{//echo '1111';
												if($loca->getJour50()>0)
												{
													$jour50 += ($loca->getLoyerp1() * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loca->getLoyerp1() * $loca->getjour100());
												}
												$totalht += $nbjloc * $loca->getLoyerp1() - $jour50 - $jour100;
											}
											elseif(null !== $loca->getLoyerp2())
											{//echo '2222';
												if($loca->getJour50()>0)
												{
													$jour50 += ($loca->getLoyerp2() * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loca->getLoyerp2() * $loca->getjour100());
												}
												$totalht += $nbjloc * $loca->getLoyerp2() - $jour50 - $jour100;
							// echo '>>>'.$nbjloc.'**'.$loca->getLoyerp2().'=='.$nbjloc*$loca->getLoyerp2();
											}
											elseif(null !== $loca->getLoyerp3())
											{//echo '3333';
												if($loca->getJour50()>0)
												{
													$jour50 += ($loca->getLoyerp3() * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loca->getLoyerp3() * $loca->getjour100());
												}
												$totalht += ($nbjloc * $loca->getLoyerp3()) - $jour50 - $jour100;
											}
											elseif(null !== $loca->getLoyerp4())
											{
												if($loca->getJour50()>0)
												{
													$jour50 += ($loca->getLoyerp4() * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loca->getLoyerp4() * $loca->getjour100());
												}
												$totalht += ($nbjloc * $loca->getLoyerp4()) - $jour50 - $jour100;
											}
											elseif(null !== $loca->getLoyermensuel())
											{
												if($nbjloc < 20)
												{
													$loyer = $loca->getLoyermensuel()/$nbjloc;
												}
												else
												{
													$nbjloc = 20;													
													$loyer = ($loca->getLoyermensuel()/20);
												}													
												if($loca->getJour50()>0)
												{
													$jour50 += ($loyer * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loyer * $loca->getjour100());
												}
												$totalht += ($nbjloc * $loyer) - $jour50 - $jour100;
											}
		// echo '++++'.$totalht.'+++';	echo $loca->getEntreprise();									
											if(null !== $loca->getMontantcarb())
											{
												$montantcarb += $loca->getMontantcarb();
											}
											
											if(null !== $loca->getTransportaller() && $loca->getTransportaller()>0 && $loca->getDebutloc() <= $finmois && $loca->getFinloc() <= $finmois)
											{
												$transport += $loca->getTransportaller();
											}
											elseif(null !== $loca->getTransportaller() && $loca->getTransportaller()>0 && $loca->getDebutloc() <= $debutmois && $loca->getFinloc() >= $debutmois && $loca->getFinloc() <= $finmois)
											{
												$transport += $loca->getTransportaller();
											}
											
											if(null !== $loca->getTransportretour() && $loca->getTransportretour()>0 && $loca->getDebutloc() <= $finmois && $loca->getFinloc() <= $finmois)
											{
												$transport += $loca->getTransportretour();

											}
											elseif(null !== $loca->getTransportretour() && $loca->getTransportretour()>0 && $loca->getDebutloc() <= $debutmois && $loca->getFinloc() >= $debutmois && $loca->getFinloc() <= $finmois)

											{
												$transport += $loca->getTransportretour();

											}
								}
							}
							else
							{}//echo 'pas enregistré parc';
							// echo '***'.$nbjloc.'-'.$nbjloc*$loyer.'-'.$totalht.'***';
						}
						//Partie sous location
						foreach($locata->getLocationssl() as $loca)
						{	
							if(($loca->getEtatloc() == 'En location' and strtotime($loca->getDebutloc()) < strtotime(date('Y-m-01'))) or ($loca->getEtatloc() == 'Location terminée' ))
							{
								$locationsclonedeja = $em->getRepository('BaclooCrmBundle:Locationsslclone')
									->findBy(array('oldid' => $loca->getId(), 'etatloc' => 'Location terminée', 'codemachineinterne' => $loca->getCodemachineinterne()));						
								if($loca->getEtatloc() == 'Location terminée' && !empty($locationsclonedeja))
								{}
								else
								{							
									$finloc = strtotime ($loca->getFinloc());	
									$finlocsec = strtotime ($loca->getFinloc());	
									$dStart = $loca->getDebutloc();
									$dStartsec = strtotime ($loca->getDebutloc());
									$dEnd = $loca->getFinloc();
// echo 'xxxxxxxxxxxxxxxxx';echo $finmois; echo $loca->getFinloc();
									//Si date début antérieure au début du mois >> date début = début mois
									if($dStartsec <= $debutmoissec)
									{
										$dStart = $debutmois;
									}
									//Si date fin posterieure à fin du mois >> date fin = fin mois
									if($finlocsec >= $finmoissec)
									{
										if($loca->getEtatloc() == 'Location terminée')
										{//echo 'ici';
											$dEnd = $loca->getFinloc();
											$finmois = $loca->getFinloc();
											$finmoissec = strtotime ($finmois);

										}
										else

										{
											if($loca->getEtatloc() == 'En location')
											{
												$finmois = date('Y-m-t', strtotime(" -1 month"));//Fin mois précédent
												$finmoissec = strtotime ($finmois);
											}		
											$dEnd = $finmois;
										}
									}
									//Si date fin posterieure à fin du mois >> date début = début mois

										//Si date début après début de mois alors $dstart = $dstart on ne fait rien.
										
										//1.Récupérer les données de la table Locata cf supra
											   
										//2.On génère les entêtes de colonnes à partir de la fonction createplanning

										//on calcule le nombre de jours de location
										// echo $loca->getEntreprise();//echo $dStart;echo $dEnd;									
										$begin = new DateTime($dStart);
										$end = new DateTime($dEnd);
										$end = $end->modify( '+1 day' ); 

										$interval = DateInterval::createFromDateString('1 day');
										$period = new DatePeriod($begin, $interval, $end);
										$nbjloc = 0;
										$nbjlocass = 0;

										foreach ($period as $dt) {
											$newformat = $dt->format("D");
											$nbjlocass++;
											if($locata->getFacturersamedi() == 1 && $newformat == 'Sat')
											{
												$nbjloc++;
											}
											elseif($locata->getFacturerdimanche() == 1 && $newformat == 'Sun')
											{
												$nbjloc++;
											}
											elseif($newformat == 'Sat' or $newformat == 'Sun')
											{}
											else
											{
												$nbjloc++;
											}							
										}																
									
									$locations = new Locationsslclone;
									$locations->setCodeclient($loca->getCodeclient());
									$locations->setEntid($loca->getCodeclient());
									$locations->setEntreprise($loca->getEntreprise());
									$locations->setMachineid($loca->getMachineid());
									$locations->setCodemachine($loca->getCodemachine());
									$locations->setCodemachine($loca->getCodemachine());
									$locations->setCodemachineinterne($loca->getCodemachineinterne());
									$locations->setTypemachine($loca->getTypemachine());
									$locations->setTypemachineinit($loca->getTypemachineinit());
									$locations->setEtatloc($loca->getEtatloc());
									$locations->setLoyerp1($loca->getLoyerp1());
									$locations->setLoyerp2($loca->getLoyerp2());
									$locations->setLoyerp3($loca->getLoyerp3());
									$locations->setLoyerp4($loca->getLoyerp4());
									$locations->setLoyermensuel($loca->getLoyermensuel());
									$locations->setNbjloc($nbjloc);
									$locations->setNbjlocass($nbjlocass);
									
									if(empty($loca->getNbjloc()) or $loca->getNbjloc() == 0){$locnbjloc = 1;}else{$locnbjloc = $loca->getNbjloc();}
									$loyer = ($loca->getMontantloc()/$locnbjloc);
									// $totalht += $loyer*$nbjloc;
									$locations->setMontantloc($loyer*$nbjloc);
									
									$locations->setLitrescarb($loca->getLitrescarb());
									$locations->setMontantcarb($loca->getMontantcarb());
									$locations->setEnergie($loca->getEnergie());
									$locations->setDatereprise($loca->getDatereprise());
									if($loca->getEtatloc() == 'En location' && strtotime($loca->getDebutloc()) < $debutmoissecinit)
									{
										$locations->setDebutloc($debutmoisinit);
									}
									else
									{
										$locations->setDebutloc($loca->getDebutloc());
									}
									
									if($loca->getEtatloc() == 'En location' && strtotime($loca->getFinloc()) >= date('Y-m-01'))
									{
										$locations->setFinloc(date('Y-m-t', strtotime(" -1 month")));
									}
									else
									{
										$locations->setFinloc($loca->getFinloc());
									}								
									if($loca->getDebutloc() >= $debutmois && $loca->getDebutloc() <= $finmois)
									{
										$locations->setTransportaller($loca->getTransportaller());
										$totaltrspaller += $loca->getTransportaller();
										$premiermois++;
									}
									
									if($loca->getFinloc() >= $debutmois && $loca->getFinloc() <= $finmois)
									{
										$locations->setTransportretour($loca->getTransportretour());
										$totaltrspretour += $loca->getTransportretour();
									}
									
									$locations->setContributionverte($loca->getContributionverte());
									if($loca->getContributionverte() == 1)
									{
										$contributionverte += $loyer * $nbjloc *0.025;//$contributionverte += $loyer*$nbjloc*0.0215;
									}
									else
									{
										$contributionverte += 0;
									}
									
									$locations->setAssurance($loca->getAssurance());
									if($loca->getAssurance() == 1)
									{
										$assurance += $loyer*$nbjlocass*0.10;
									}
									else
									{
										$assurance = 0;
									}
									
									$locations->setJour50($loca->getJour50());
									$locations->setJour100($loca->getJour100());
									$locations->setOldid($loca->getId());
									$locations->addLocataclone($newLocata);
									$newLocata->addLocationsslclone($locations);
									$em->persist($locations);	
									$em->persist($newLocata);
									$em->flush();

											//Création du montant HT ligne par ligne
											// $totalht = 0;//echo $locid;

											if(null !== $loca->getLoyerp1())
											{
												if($loca->getJour50()>0)
												{
													$jour50 += ($loca->getLoyerp1() * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loca->getLoyerp1() * $loca->getjour100());
												}
												$totalht += ($nbjloc * $loca->getLoyerp1()) - $jour50 - $jour100;
											}
											elseif(null !== $loca->getLoyerp2())

											{
												if($loca->getJour50()>0)
												{
													$jour50 += ($loca->getLoyerp2() * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loca->getLoyerp2() * $loca->getjour100());
												}
												$totalht += ($nbjloc * $loca->getLoyerp2()) - $jour50 - $jour100;
											}
											elseif(null !== $loca->getLoyerp3())

											{
												if($loca->getJour50()>0)
												{
													$jour50 += ($loca->getLoyerp3() * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loca->getLoyerp3() * $loca->getjour100());
												}
												$totalht += ($nbjloc * $loca->getLoyerp3()) - $jour50 - $jour100;
											}
											elseif(null !== $loca->getLoyerp4())
											{
												if($loca->getJour50()>0)
												{
													$jour50 += ($loca->getLoyerp4() * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loca->getLoyerp4() * $loca->getjour100());
												}
												$totalht += ($nbjloc * $loca->getLoyerp4()) - $jour50 - $jour100;
											}
											elseif(null !== $loca->getLoyermensuel())
											{
												if($nbjloc < 20)
												{
													$loyer = $loca->getLoyermensuel()/$nbjloc;
												}
												else
												{
													$nbjloc = 20;													
													$loyer = ($loca->getLoyermensuel()/20);
												}													
												if($loca->getJour50()>0)
												{
													$jour50 += ($loyer * $loca->getjour50())*0.5;
												}
												if($loca->getJour100()>0)
												{
													$jour100 += ($loyer * $loca->getjour100());
												}
												$totalht += ($nbjloc * $loyer) - $jour50 - $jour100;
											}
											if(null !== $loca->getMontantcarb())
											{											
												// $totalht += $loca->getMontantcarb();
											}
											if(null !== $loca->getMontantcarb())
											{
												$montantcarb += $loca->getMontantcarb();
											}						
											if(null !== $loca->getTransportaller() && $loca->getTransportaller()>0 && $loca->getDebutloc() >= $debutmois && $loca->getDebutloc() <= $finmois)
											{
												$transport += $loca->getTransportaller();
											}
											
											if(null !== $loca->getTransportretour() && $loca->getTransportretour()>0 && $loca->getFinloc() >= $debutmois && $loca->getFinloc() <= $finmois)
											{
												$transport += $loca->getTransportretour();
											}
								}
							}
							else
							{}//echo 'pas enregistré sl';
							// echo 'xxx'.$nbjloc.'-'.$nbjloc*$loyer.'-'.$totalht.'xxx';	
						}
						//Si on est sur la première facture on clone les locataventes pour les facturer
						//Car les vente ne doivent êrte facturées qu'ne fois
						$montantlocaventes = 0; //Pour la vente
						$montantlocaventestot = 0 + $montantcarb;//Pour toutes les ventes
						if($premiermois > 0)
						{//echo 'premier mois locavente';
							foreach($locata->getLocataventes() as $ven)
							{
								//ici on clone les locataventes si on est le premier mois
								$locataventes = new Locataventesclone;
								$locataventes->setDate($ven->getDate());
								$locataventes->setRefarticle($ven->getRefarticle());
								$locataventes->setDescription($ven->getDescription());
								$locataventes->setQuantite($ven->getQuantite());
								$locataventes->setPu($ven->getPu());
								$locataventes->setMontantvente($ven->getMontantvente());
								$locataventes->setUser($ven->getUser());
								$locataventes->setCodifvente($ven->getCodifvente());
								$locataventes->addLocataclone($newLocata);
								$newLocata->addLocataventesclone($locataventes);
								$em->persist($locataventes);	
								$em->persist($newLocata);
								$em->flush();
								
								//Faut établir un montant global des ventes pour la facturation
								$montantlocaventestot += $ven->getMontantvente();//Pour toutes les ventes
								
							}
						}else{}//echo 'pas premier mois locavente';
	
						//Nous actualisons le locataclone avec les nouvelles données
						$newLocata->setMontantloc($totalht);echo 'totalhtcomplet'.$totalht;
						$newLocata->setMontantlocavente($montantlocaventestot);echo 'ventes'.$montantlocaventestot;
						$newLocata->setTransportaller($totaltrspaller);//echo 'transportaller'.$totaltrspaller;
						$newLocata->setTransportretour($totaltrspretour);//echo 'transportaller'.$totaltrspretour;
						$newLocata->setContributionverte($contributionverte);//echo 'contributionverte'.$contributionverte;
						$newLocata->setAssurance($assurance);//echo 'assurance'.$assurance;
						$em->persist($newLocata);
						$em->flush();
						
						if($newLocata->getRemise() > 0)
						{
							$totalht = $totalht - ($totalht * $newLocata->getRemise()/100);
						}
						//On vérifie si le transport aller a déjà été facturé
						$locatador = $em->getRepository('BaclooCrmBundle:Afacturer')
									->findOneBy(array('piece' => $locata->getId(), 'libelle' => 'Transport aller'));							
						
						if($newLocata->getAssurance() > 0)
						{ 
							$rc = $newLocata->getAssurance(); 
						}
						else
						{
							$rc = 0; 
						}
						
						if($newLocata->getContributionverte() > 0)
						{
							$ecopart = $newLocata->getContributionverte();
						}
						else
						{
							$ecopart = 0;						
						}

						$compteclient = '411'.$newLocata->getClientid();
						// echo 'montantcarb!!!';echo $montantcarb;
						$totalhtfac = $newLocata->getMontantloc() + $newLocata->getTransportaller() + $newLocata->getTransportretour() + $newLocata->getContributionverte() + $newLocata->getAssurance() + $newLocata->getMontantlocavente();
						$tva20 = $totalhtfac * 0.20;



						$totalttc = $totalhtfac + $tva20;echo 'totalhtfac'.$totalhtfac;
						// echo $compteclient;echo '----'.$totalttc;echo '------'.$locata->getId().'****';
						$journalori = $em->getRepository('BaclooCrmBundle:Afacturer')
										->findOneBy(array('compte'=>$compteclient, 'debit'=>$totalttc, 'piece'=>$locata->getId()));
						if(isset($journalori))
						{
							$message = 1;
							$date = $journalori->getDate();
						}
						else
						{
							$message = 0;
							$afacturer = new Afacturer;
							$afacturer->setDate($today);
							$afacturer->setJournal('VT');
							$afacturer->setCompte($compteclient);
							$afacturer->setDebit($totalttc);			
							$afacturer->setCredit(0);			
							$afacturer->setLibelle($locata->getClient());			
							$afacturer->setPiece($locata->getId());			
							$afacturer->setEcheance(date('Y-m-d', strtotime("+45 days")));			
							$afacturer->setAnalytique('Client');
							$em->persist($afacturer);
							$em->flush();
										
							$client = $em->getRepository('BaclooCrmBundle:Fiche')
										->findOneById($locata->getClientid());
							
							$ftotalht = new Afacturer;
							$ftotalht->setDate($today);
							$ftotalht->setJournal('VT');
							if($client->getTypeclient() == 'france')
							{
								$ftotalht->setCompte(706100);		
							}
							elseif($client->getTypeclient() == 'ue')
							{
								$ftotalht->setCompte(706110);		
							}
							elseif($client->getTypeclient() == 'export')
							{
								$ftotalht->setCompte(706115);		
							}else{$ftotalht->setCompte(9999999);}
							$ftotalht->setDebit(0);			
							$ftotalht->setCredit($totalht + $ecopart);			
							$ftotalht->setLibelle('Location de materiel d\'elevation');			
							$ftotalht->setPiece($locata->getId());				
							$ftotalht->setEcheance(date('Y-m-d', strtotime("+45 days")));			
							$ftotalht->setAnalytique('Loc');
							$em->persist($ftotalht);
							$em->flush();

							if($montantlocaventestot > 0)
							{
								$ventes = new Afacturer;
								$ventes->setDate($today);
								$ventes->setJournal('VT');
								if($client->getTypeclient() == 'france')
								{
									$ventes->setCompte(707100);		
								}
								elseif($client->getTypeclient() == 'ue')
								{
									$ventes->setCompte(707110);		
								}
								elseif($client->getTypeclient() == 'export')
								{
									$ventes->setCompte(707115);		
								}else{$carburant->setCompte(9999999);}
								$ventes->setDebit(0);			
								$ventes->setCredit($montantcarb);			
								$ventes->setLibelle('Vente de carburant');			
								$ventes->setPiece($locata->getId());				
								$ventes->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$ventes->setAnalytique('Vente');
								$em->persist($ventes);
								$em->flush();
							}
							
							// if($montantcarb > 0)
							// {

								// $carburant = new Afacturer;
								// $carburant->setDate($today);
								// $carburant->setJournal('VT');
								// if($client->getTypeclient() == 'france')
								// {

									// $carburant->setCompte(707100);		
								// }

								// elseif($client->getTypeclient() == 'ue')
								// {

									// $carburant->setCompte(707110);		
								// }

								// elseif($client->getTypeclient() == 'export')
								// {

									// $carburant->setCompte(707115);		
								// }else{$carburant->setCompte(9999999);}
								// $carburant->setDebit(0);			
								// $carburant->setCredit($montantcarb);			
								// $carburant->setLibelle('Vente de carburant');			
								// $carburant->setPiece($locata->getId());				
								// $carburant->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								// $carburant->setAnalytique('Vente');
								// $em->persist($carburant);
								// $em->flush();
							// }

					
							if($client->getTypeclient() == 'france')
							{
								$ftva = new Afacturer;
								$ftva->setDate($today);
								$ftva->setJournal('VT');
								$ftva->setCompte(445710);
								$ftva->setDebit(0);			
								$ftva->setCredit($tva20);			
								$ftva->setLibelle('TVA collectee');			
								$ftva->setPiece($locata->getId());				
								$ftva->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$ftva->setAnalytique('Tva');
								$em->persist($ftva);
								$em->flush();						
							}
							
							if($newLocata->getAssurance() > 0)
							{
								$fassurance= new Afacturer;
								$fassurance->setDate($today);
								$fassurance->setJournal('VT');
								if($client->getTypeclient() == 'france')
								{
									$fassurance->setCompte(706200);			
									$fassurance->setLibelle('Assurance France');
								}
								elseif($client->getTypeclient() == 'ue')
								{
									$fassurance->setCompte(706201);			
									$fassurance->setLibelle('Assurance UE');		
								}
								elseif($client->getTypeclient() == 'export')
								{
									$fassurance->setCompte(706202);			
									$fassurance->setLibelle('Assurance Export');		
								}
								$fassurance->setDebit(0);			
								$fassurance->setCredit($rc);			
								$fassurance->setPiece($locata->getId());				
								$fassurance->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$fassurance->setAnalytique('Assurance');
								$em->persist($fassurance);
								$em->flush();					
							}
							
							// if($locatas['f_contributionverte'] > 0)
							// {
								// $fecopart = new Afacturer;
								// $fecopart->setDate($today);
								// $fecopart->setJournal('VT');
								// $fecopart->setCompte('611'.$locata->getClientid());
								// $fecopart->setDebit(0);			
								// $fecopart->setCredit($ecopart);			
								// $fecopart->setLibelle('Frais environnementaux');			
								// $fecopart->setPiece($locata->getId());					
								// $fecopart->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								// $fecopart->setAnalytique('Client');
								// $em->persist($fecopart);
								// $em->flush();					
							// }
							
						//ATTENTION !!! FACTURATION TRANSPORT RETOUR QUE SI CONTRAT TERMINE
							if($newLocata->getTransportaller() > 0 && empty($locatador))
							{
								$taller = new Afacturer;
								$taller->setDate($today);
								$taller->setJournal('VT');
								if($client->getTypeclient() == 'france')
								{
									$taller->setCompte(706210);			
									$taller->setLibelle('Transport France');	
								}
								elseif($client->getTypeclient() == 'ue')
								{
									$taller->setCompte(706211);			
									$taller->setLibelle('Transport UE');			
								}
								elseif($client->getTypeclient() == 'export')
								{
									$taller->setCompte(706212);			
									$taller->setLibelle('Transport Export');			
								}
								else
								{
									$taller->setCompte(706210);;			
									$taller->setLibelle('Transport');
								}
								$taller->setDebit(0);
							//on regroupe les trsport dans un seul transport	

							if($newLocata->getTransportretour() > 0)
							{								
								$taller->setCredit($newLocata->getTransportaller() + $newLocata->getTransportretour());
								
							}
							else
							{
								$taller->setCredit($newLocata->getTransportaller());
							}
								$taller->setPiece($locata->getId());				
								$taller->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$taller->setAnalytique('Transport');
								$em->persist($taller);
								$em->flush();					
							}
							
							// if($locata->getTransportretour() > 0)
							// {
								// $tretour = new Afacturer;
								// $tretour->setDate($today);
								// $tretour->setJournal('VT');
								// if($client->getTypeclient() == 'france')
								// {
									// $tretour->setCompte(706210);			
									// $tretour->setLibelle('Transport France');	
								// }
								// elseif($client->getTypeclient() == 'ue')
								// {
									// $tretour->setCompte(706211);			
									// $tretour->setLibelle('Transport UE');			
								// }
								// elseif($client->getTypeclient() == 'export')
								// {
									// $tretour->setCompte(706212);			
									// $tretour->setLibelle('Transport Export');			
								// }else{$ftotalht->setCompte(9999999);}
								// $tretour->setDebit(0);			
								// $tretour->setCredit($locata->getTransportretour());			
								// $tretour->setPiece($locata->getId());				
								// $tretour->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								// $tretour->setAnalytique('Transport retour');
								// $em->persist($tretour);
								// $em->flush();					
							// }
								
								//Ajout à la table factures
									$facta = $em->getRepository('BaclooCrmBundle:Facta')
												->findOneByControle('1234');				
									$facture = new Factures;
									
									$query = $em->createQuery(
										'SELECT b.id
										FROM BaclooCrmBundle:Factures b
										ORDER BY b.id DESC'
									)->setMaxResults(1);
									// $lastnumfact = $query->getResult();
									// if(empty($lastnumfact)){$lastnum = 0;}
									// else{foreach($lastnumfact as $last){$lastnum = $last['id'];}}
									$lastnumfact = $query->getOneOrNullResult();
									if(empty($lastnumfact) or !isset($lastnumfact) or $lastnumfact == null)
									{
										$lastnumfact = 0;//echo 'vide';
									}
									else
									{
										$lastnumfact = $query->getSingleScalarResult();//echo 'pas vide';
									}
									$numfacture = date('Y').($lastnumfact++);
									
									$client = $em->getRepository('BaclooCrmBundle:Fiche')		
									 ->findOneById($locata->getClientid());
									if($client->getDelaireglement() == 1)
									{
										$next45 = $today;
									}
									elseif($client->getDelaireglement() == 2)
									{
										$next45 = date('Y-m-d', strtotime($today . '+45 days'));
									}
									elseif($client->getDelaireglement() == 3)
									{
										$next45 = date('Y-m-d', strtotime($today . '+30 days'));
									}
									else
									{
										$next45 = $today;
									}						
									
									$facture->setNumfacture($numfacture);
									$facture->setCodelocata($locata->getId());
									$facture->setClientid($locata->getClientid());
									$facture->setClient($locata->getClient());
									$facture->setTotalht($totalhtfac);
									$facture->setTotalttc($totalttc);
									$facture->setEcheance($next45);
									// $facture->setDebutloc($locata->getDebutloc());
									// $facture->setFinloc($locata->getFinloc());
									$facture->setChantier($locata->getNomchantier());
									$facture->setReglement(0);
									$facture->setDatepaiement('');
									$facture->setModepaiement('');
									$facture->setTypedoc('facture');
									$facture->setDatecrea($today);
									$facture->setLocatacloneid($newLocata->getId());
									$facture->addFactum($facta);
									$facta->addFacture($facture);
									$em->persist($facture);
									$em->flush();
									//Fin ajout table factures
						}		
					}
				}
			
				//Partie ventes
			
				foreach($vendatot as $vendas)
				{
					$venda = $em->getRepository('BaclooCrmBundle:Venda')
								->findOneById($vendas['f_id']);						
					$codecontrat = 'V-'.$venda->getId();
					$facturemois = $em->getRepository('BaclooCrmBundle:Factures')
								->facturesmois($codecontrat);
//echo $codecontrat;
// print_r($facturemois);
					$totalht = 0;//echo $locid;			
					$venteslignes = 0;			
					$entretienlignes = 0;			
					$transportlignes = 0;			
					$annexeslignes = 0;			
					$assurancelignes = 0;			
					$descriptionvente = array();			
					$descriptionentretien = array();			
					$descriptiontransport = array();			
					$descriptionannexe = array();
				
					if(empty($facturemois) && $venda->getBdcrecu() == 1)
					{
						foreach($venda->getVentes() as $loca)
						{
							//Nous récupérons et formatons les différentes dates
							// $finloc = strtotime ($loca->getFinloc());	
							// $finlocsec = strtotime ($loca->getFinloc());	
							// $dStart = $loca->getDebutloc();
							// $dStartsec = strtotime ($loca->getDebutloc());
							// $dEnd = $loca->getFinloc();

							//Si date début antérieure au début du mois >> date début = début mois
							// if($dStartsec <= $debutmoissec)
							// {
								// $dStart = $debutmois;
							// }
							//Si date fin posterieure à fin du mois >> date début = début mois
							// if($finlocsec >= $finmoissec)
							// {
								// $dEnd = $finmois;
							// }
							//Création du montant HT de la ligne
							if(null == $loca->getQuantite())
							{
								$quantite = 1;
							}
							else
							{
								$quantite = $loca->getQuantite();
							}
							$montantligne = $loca->getPu() * $quantite;
							$totalht += $montantligne;

							$client = $em->getRepository('BaclooCrmBundle:Venda')
										->findOneById($venda->getClientid());					
							//On affecte chaque ligne à sa famille
							if($loca->getCodifvente() == 'vente')
							{
								$venteslignes += $montantligne;
								$descriptionvente[] = $loca->getDescription();
							}
							elseif($loca->getCodifvente() == 'entretien')
							{
								$entretienlignes += $montantligne;
								$descriptionentretien[] = $loca->getDescription();
							}
							elseif($loca->getCodifvente() == 'transport')
							{
								$transportlignes += $montantligne;
								$descriptiontransport[] = $loca->getDescription();
							}
							elseif($loca->getCodifvente() == 'annexes')
							{
								$annexeslignes += $montantligne;
								$descriptionannexe[] = $loca->getDescription();
							}
							elseif($loca->getCodifvente() == 'remise')
							{
							}
							elseif($loca->getCodifvente() == 'assurance')
							{
								$assurancelignes += $montantligne;
							}
							//Fin affectation ligne à sa famille
							
							$loca->setMontantvente($montantligne);
							$em->persist($loca);

						}					
						$compteclient = '411'.$venda->getClientid();
						
						$tva20 = $venda->getMontantvente() * 0.20;
						$totalhtfac = $venda->getMontantvente();
						$totalttc = $totalhtfac + $tva20;

						//Avant de saisir les écritures on vérifie qu'elle n'aient pas déjà été saisies
						$journalori = $em->getRepository('BaclooCrmBundle:Afacturer')
										->findOneBy(array('compte'=>$compteclient, 'debit'=>$totalttc, 'piece'=>$venda->getId()));
						if(isset($journalori))
						{
							$message = 1;
							$date = $journalori->getDate();
						}
						else
						{
							$message = 0;
							$afacturer2 = new Afacturer;
							$afacturer2->setDate($today);
							$afacturer2->setJournal('VT');
							$afacturer2->setCompte($compteclient);
							$afacturer2->setDebit($totalttc);			
							$afacturer2->setCredit(0);			
							$afacturer2->setLibelle($venda->getClient());			
							$afacturer2->setPiece('V-'.$venda->getId());			
							$afacturer2->setEcheance(date('Y-m-d', strtotime("+45 days")));			
							$afacturer2->setAnalytique('Client');
							$em->persist($afacturer2);
							$em->flush();
										
							$client = $em->getRepository('BaclooCrmBundle:Fiche')
										->findOneById($venda->getClientid());
						
						$v = 0;
						$e = 0;
						$t = 0;
						$ass = 0;
						$ann = 0;
						
						foreach($venda->getVentes() as $vente)
						{
							if($vente->getCodifvente() == 'vente' && $v == 0)
							{
								$ventes = new Afacturer;
								$ventes->setDate($today);
								$ventes->setJournal('VT');
								if($client->getTypeclient() == 'france')
								{
									$ventes->setCompte(707100);		
								}
								elseif($client->getTypeclient() == 'ue')
								{
									$ventes->setCompte(707110);		
								}
								elseif($client->getTypeclient() == 'export')
								{
									$ventes->setCompte(707115);		
								}else{$ventes->setCompte(9999999);}
								$ventes->setDebit(0);			
								$ventes->setCredit($venteslignes);			
								$ventes->setLibelle($venda->getClient());			
								$ventes->setPiece('V-'.$venda->getId());				
								$ventes->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$ventes->setAnalytique('Vente');
								$em->persist($ventes);
								$em->flush();
								$v++;
							}
							elseif($vente->getCodifvente() == 'entretien' && $e == 0)
							{
								$entretien = new Afacturer;
								$entretien->setDate($today);
								$entretien->setJournal('VT');
								if($client->getTypeclient() == 'france')
								{
									$entretien->setCompte(706220);		
								}
								elseif($client->getTypeclient() == 'ue')
								{
									$entretien->setCompte(706221);		
								}
								elseif($client->getTypeclient() == 'export')
								{
									$entretien->setCompte(706222);		
								}else{$entretien->setCompte(9999999);}
								$entretien->setDebit(0);			
								$entretien->setCredit($entretienlignes);			
								$entretien->setLibelle($venda->getClient());			
								$entretien->setPiece('V-'.$venda->getId());				
								$entretien->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$entretien->setAnalytique('Entretien');
								$em->persist($entretien);
								$em->flush();	
								$e++;
							}
							elseif($vente->getCodifvente() == 'transport' && $t == 0)
							{
								$transport = new Afacturer;
								$transport->setDate($today);
								$transport->setJournal('VT');
								if($client->getTypeclient() == 'france')
								{
									$transport->setCompte(706210);		
								}
								elseif($client->getTypeclient() == 'ue')
								{
									$transport->setCompte(706211);		
								}
								elseif($client->getTypeclient() == 'export')
								{
									$transport->setCompte(706212);		
								}else{$transport->setCompte(9999999);}
								$transport->setDebit(0);			
								$transport->setCredit($transportlignes);			
								$transport->setLibelle($venda->getClient());			
								$transport->setPiece('V-'.$venda->getId());				
								$transport->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$transport->setAnalytique('transport');
								$em->persist($transport);
								$em->flush();
								$t++;
							}
							elseif($vente->getCodifvente() == 'assurance' && $ass == 0)
							{
								$assurance = new Afacturer;
								$assurance->setDate($today);
								$assurance->setJournal('VT');
								if($client->getTypeclient() == 'france')
								{
									$assurance->setCompte(706200);		
								}
								elseif($client->getTypeclient() == 'ue')
								{
									$assurance->setCompte(706201);		
								}
								elseif($client->getTypeclient() == 'export')
								{
									$assurance->setCompte(706202);		
								}else{$assurance->setCompte(9999999);}
								$assurance->setDebit(0);			
								$assurance->setCredit($vente->getMontantvente());			
								$assurance->setLibelle($venda->getClient());			
								$assurance->setPiece('V-'.$venda->getId());				
								$assurance->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$assurance->setAnalytique('assurance');
								$em->persist($assurance);
								$em->flush();
								$ass++;								
							}
							elseif($vente->getCodifvente() == 'annexes' && $ann == 0)
							{
								$annexes = new Afacturer;
								$annexes->setDate($today);
								$annexes->setJournal('VT');
								if($client->getTypeclient() == 'france')
								{
									$annexes->setCompte(708000);		
								}
								elseif($client->getTypeclient() == 'ue')
								{
									$annexes->setCompte(708000);		
								}
								elseif($client->getTypeclient() == 'export')
								{
									$annexes->setCompte(708000);		
								}else{$annexes->setCompte(9999999);}
								$annexes->setDebit(0);			
								$annexes->setCredit($annexeslignes);			
								$annexes->setLibelle($venda->getClient());			
								$annexes->setPiece('V-'.$venda->getId());				
								$annexes->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$annexes->setAnalytique('annexes');
								$em->persist($annexes);
								$em->flush();
								$ann++;
							}
						}
							
							if($client->getTypeclient() == 'france')
							{
								$ftva = new Afacturer;
								$ftva->setDate($today);
								$ftva->setJournal('VT');
								$ftva->setCompte(445710);
								$ftva->setDebit(0);			
								$ftva->setCredit($tva20);			
								$ftva->setLibelle('TVA collectee');			
								$ftva->setPiece('V-'.$venda->getId());				
								$ftva->setEcheance(date('Y-m-d', strtotime("+45 days")));			
								$ftva->setAnalytique('Tva');
								$em->persist($ftva);
								$em->flush();						
							}
								//Ajout à la table factures
									$facta = $em->getRepository('BaclooCrmBundle:Facta')
												->findOneByControle('1234');				
									$facture = new Factures;
									
									$query = $em->createQuery(
										'SELECT b.id
										FROM BaclooCrmBundle:Factures b
										ORDER BY b.id DESC'
									)->setMaxResults(1);
									$lastnumfact = $query->getOneOrNullResult();
									if(empty($lastnumfact) or !isset($lastnumfact) or $lastnumfact == null)
									{
										$lastnumfact = 0;echo 'vide';
									}
									else
									{
										$lastnumfact = $query->getSingleScalarResult();echo 'pas vide';
									}
									$numfacture = date('Y').'V'.$lastnumfact++;
												
									$client = $em->getRepository('BaclooCrmBundle:Fiche')		
									 ->findOneById($venda->getClientid());
									if($client->getDelaireglement() == 1)
									{
										$next45 = $venda->getDate();
									}
									elseif($client->getDelaireglement() == 2)
									{
										$next45 = date('Y-m-d', strtotime($venda->getDate() . '+45 days'));
									}
									elseif($client->getDelaireglement() == 3)
									{
										$next45 = date('Y-m-d', strtotime($venda->getDate() . '+30 days'));
									}
									else
									{
										$next45 = $venda->getDate();
									}
									
									$facture->setNumfacture($numfacture);
									$facture->setCodelocata('V-'.$venda->getId());
									$facture->setClientid($venda->getClientid());
									$facture->setClient($venda->getClient());
									$facture->setTotalht($totalhtfac);
									$facture->setTotalttc($totalttc);
									$facture->setEcheance($next45);
									$facture->setChantier($venda->getClient());
									$facture->setReglement(0);
									$facture->setDatepaiement('');
									$facture->setModepaiement('');
									$facture->setTypedoc('facture');
									$facture->setDatecrea($today);
									$facture->setLocatacloneid($venda->getId());
									$facture->addFactum($facta);
									$facta->addFacture($facture);
									$em->persist($facture);
									$em->flush();
								//Fin ajout table factures					
						}			
					}
					else{echo 'faut pas enregistrer les ventes';}
				}
				//Fin partie ventes
				
				//Partie achat
			
				foreach($achatstot as $locatafrss)
				{
					$locatafrs = $em->getRepository('BaclooCrmBundle:Locatafrs')
								->findOneById($locatafrss['f_id']);						
					$codecontrat = 'H-'.$locatafrs->getId();
					
					$facturemois = $em->getRepository('BaclooCrmBundle:Factures')
								->facturesmois($codecontrat);

					$totalht = 0;//echo $locid;			
					$locationlignes = 0;			
					$piecelignes = 0;			
					$transportlignes = 0;			
					$materiellignes = 0;			
					$prestationlignes = 0;			
					$autrelignes = 0;			
					$descriptionvente = array();			
					$descriptionpiece = array();			
					$descriptiontransport = array();			
					$descriptionannexe = array();
					$descriptionautre = array();
				
					if(empty($facturemois) && $locatafrs->getEtatbdc() == 1)
					{
						foreach($locatafrs->getLocationsfrs() as $loca)
						{
							//Nous récupérons et formatons les différentes dates
							// $finloc = strtotime ($loca->getFinloc());	
							// $finlocsec = strtotime ($loca->getFinloc());	
							// $dStart = $loca->getDebutloc();
							// $dStartsec = strtotime ($loca->getDebutloc());
							// $dEnd = $loca->getFinloc();

							//Si date début antérieure au début du mois >> date début = début mois
							// if($dStartsec <= $debutmoissec)
							// {
								// $dStart = $debutmois;
							// }
							//Si date fin posterieure à fin du mois >> date début = début mois
							// if($finlocsec >= $finmoissec)
							// {
								// $dEnd = $finmois;
							// }
							//Création du montant HT de la ligne
							if(null == $loca->getQuantite())
							{
								$quantite = 1;
							}
							else
							{
								$quantite = $loca->getQuantite();
							}
							$montantligne = $loca->getPu() * $quantite;
							$totalht += $montantligne;

							$client = $em->getRepository('BaclooCrmBundle:Fiche')
										->findOneById($locatafrs->getFournisseurid());					
							//On affecte chaque ligne à sa famille
							if($loca->getReference() == 'location')
							{
								$locationlignes += $montantligne;
								$descriptionlocation[] = $loca->getDesignation();
							}
							elseif($loca->getReference() == 'piece')
							{
								$piecelignes += $montantligne;
								$descriptionpiece[] = $loca->getDesignation();
							}
							elseif($loca->getReference() == 'transport')
							{
								$transportlignes += $montantligne;
								$descriptiontransport[] = $loca->getDesignation();
							}
							elseif($loca->getReference() == 'materiel')
							{
								$materiellignes += $montantligne;
								$descriptionmateriel[] = $loca->getDesignation();
							}
							elseif($loca->getReference() == 'autre')
							{
								$autrelignes += $montantligne;
								$descriptionautre[] = $loca->getDesignation();
							}
							elseif($loca->getReference() == 'prestation')
							{
								$prestationlignes += $montantligne;
							}
							//Fin affectation ligne à sa famille
							
							$loca->setMontantht($montantligne);
							$em->persist($loca);

						}					
						$comptefrs = '401'.$locatafrs->getFournisseurid();
						
						$tva20 = $locatafrs->getMontantloc() * 0.20;
						$totalhtfac = $locatafrs->getMontantloc();
						$totalttc = $totalhtfac + $tva20;
					
						//Avant de saisir les écritures on vérifie qu'elle n'aient pas déjà été saisies
						$journalori = $em->getRepository('BaclooCrmBundle:Afacturer')
										->findOneBy(array('compte'=>$comptefrs, 'credit'=>$totalttc, 'piece'=>'H-'.$locatafrs->getId()));
						if(isset($journalori))
						{
							$message = 1;
							$date = $journalori->getDate();
						}
						else
						{
							$message = 0;
							$afacturer2 = new Afacturer;
							$afacturer2->setDate($today);
							$afacturer2->setJournal('ACH');
							$afacturer2->setCompte($comptefrs);
							$afacturer2->setDebit(0);			
							$afacturer2->setCredit($totalttc);			
							$afacturer2->setLibelle($locatafrs->getFournisseur());			
							$afacturer2->setPiece('H-'.$locatafrs->getId());			
							$afacturer2->setEcheance(date($today));			
							$afacturer2->setAnalytique('Fournisseur '.$locatafrs->getFournisseur());
							$em->persist($afacturer2);
							$em->flush();
										
							$client = $em->getRepository('BaclooCrmBundle:Fiche')
										->findOneById($locatafrs->getFournisseurid());
						
							$v = 0;
							$e = 0;
							$t = 0;
							$ass = 0;
							$ann = 0;
						
							foreach($locatafrs->getLocationsfrs() as $locationsfrs)
							{
								if($locationsfrs->getReference() == 'location' && $v == 0)
								{
									$location = new Afacturer;
									$location->setDate($today);
									$location->setJournal('ACH');
									$location->setCompte(6135);										
									$location->setDebit($locationlignes);			
									$location->setCredit(0);			
									$location->setLibelle($locatafrs->getFournisseur());			
									$location->setPiece('H-'.$locatafrs->getId());				
									$location->setEcheance(date($today));			
									$location->setAnalytique('Achat - Location de materiel');
									$em->persist($location);
									$em->flush();
									$v++;
								}
								elseif($locationsfrs->getReference() == 'piece' && $e == 0)
								{
									$piece = new Afacturer;
									$piece->setDate($today);
									$piece->setJournal('ACH');
									$piece->setCompte(615);										
									$piece->setDebit($piecelignes);			
									$piece->setCredit(0);			
									$piece->setLibelle($locatafrs->getFournisseur());			
									$piece->setPiece('H-'.$locatafrs->getId());				
									$piece->setEcheance(date($today));			
									$piece->setAnalytique('Achat - Piece');
									$em->persist($piece);
									$em->flush();	
									$e++;
								}
								elseif($locationsfrs->getReference() == 'transport' && $t == 0)
								{
									$transport = new Afacturer;
									$transport->setDate($today);
									$transport->setJournal('ACH');
									$transport->setCompte(6241);		
									
									$transport->setDebit($transportlignes);			
									$transport->setCredit(0);			
									$transport->setLibelle($locatafrs->getFournisseur());			
									$transport->setPiece('H-'.$locatafrs->getId());				
									$transport->setEcheance(date($today));			
									$transport->setAnalytique('Achat - Transport');
									$em->persist($transport);
									$em->flush();
									$t++;
								}//PAS TERMINE FAIRE LES LIGNES CI DESSOUS EN REMPLISSANT LE NUM DE COMPTE
								elseif($locationsfrs->getReference() == 'prestation' && $ass == 0)
								{
									$prestation = new Afacturer;
									$prestation->setDate($today);
									$prestation->setJournal('ACH');
									$prestation->setCompte(604);		
									
									$prestation->setDebit($locationsfrs->getMontantht());			
									$prestation->setCredit(0);			
									$prestation->setLibelle($locatafrs->getFournisseur());			
									$prestation->setPiece('H-'.$locatafrs->getId());				
									$prestation->setEcheance(date($today));			
									$prestation->setAnalytique('Achat - Prestation de services');
									$em->persist($prestation);
									$em->flush();
									$ass++;								
								}
								elseif($locationsfrs->getReference() == 'autre' && $ann == 0)
								{
									$materiel = new Afacturer;
									$materiel->setDate($today);
									$materiel->setJournal('ACH');
									$materiel->setCompte(607);		
									
									$materiel->setDebit(0);			
									$materiel->setCredit($materiellignes);			
									$materiel->setLibelle($locatafrs->getFournisseur());			
									$materiel->setPiece('H-'.$locatafrs->getId());				
									$materiel->setEcheance(date($today));			
									$materiel->setAnalytique('Autres achats');
									$em->persist($materiel);
									$em->flush();
									$ann++;
								}
							}
							
							if($client->getTypeclient() == 'france')
							{
								$ftva = new Afacturer;
								$ftva->setDate($today);
								$ftva->setJournal('ACH');
								$ftva->setCompte(44566);
								$ftva->setDebit($tva20);			
								$ftva->setCredit(0);			
								$ftva->setLibelle('TVA collectee');			
								$ftva->setPiece('H-'.$locatafrs->getId());				
								$ftva->setEcheance(date($today));			
								$ftva->setAnalytique('Tva');
								$em->persist($ftva);
								$em->flush();						
							}
								//Ajout à la table factures
									$facta = $em->getRepository('BaclooCrmBundle:Facta')
												->findOneByControle('1234');				
									$facture = new Factures;
									
									$query = $em->createQuery(
										'SELECT b.id
										FROM BaclooCrmBundle:Factures b
										ORDER BY b.id DESC'
									)->setMaxResults(1);
									$lastnumfact = $query->getOneOrNullResult();
									if(empty($lastnumfact) or !isset($lastnumfact) or $lastnumfact == null)
									{
										$lastnumfact = 0;//echo 'vide';
									}
									else
									{
										$lastnumfact = $query->getSingleScalarResult();//echo 'pas vide';
									}
									$numfacture = date('Y').'H'.($lastnumfact++);
												
									$client = $em->getRepository('BaclooCrmBundle:Fiche')		
									 ->findOneById($locatafrs->getFournisseurid());
									if($client->getDelaireglement() == 1)
									{
										$next45 = $today;
									}
									elseif($client->getDelaireglement() == 2)
									{
										$next45 = date('Y-m-d', strtotime($today . '+45 days'));
									}
									elseif($client->getDelaireglement() == 3)
									{
										$next45 = date('Y-m-d', strtotime($today . '+30 days'));
									}
									else
									{
										$next45 = $today;
									}
									
									$facture->setNumfacture($numfacture);
									$facture->setCodelocata('H-'.$locatafrs->getId());
									$facture->setClientid($locatafrs->getFournisseurid());
									$facture->setClient($locatafrs->getFournisseur());
									$facture->setTotalht($totalhtfac);
									$facture->setTotalttc($totalttc);
									$facture->setEcheance($next45);
									$facture->setChantier($locatafrs->getFournisseur());
									$facture->setReglement(0);
									$facture->setDatepaiement('');
									$facture->setModepaiement('');
									$facture->setTypedoc('bon de commande');
									$facture->setLocatacloneid($locatafrs->getId());
									$facture->setDatecrea($today);
									$facture->addFactum($facta);
									$facta->addFacture($facture);
									$em->persist($facture);
									$em->flush();
								//Fin ajout table factures					
						}
					}
					else{echo 'faut pas enregistrer les achats';}
				}
				//Fin partie achat
		//FIN FACTURATION MENSUELLE