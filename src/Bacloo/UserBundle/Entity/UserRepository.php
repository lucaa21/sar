<?php

namespace Bacloo\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	public function recuptags($user)
	{
		$qb = $this->createQueryBuilder('u');
		$qb->where('u.username = :username')
		->setParameter('username', $user);	
		return $qb->getQuery()->getResult();	
	}
	
	public function recupuser($user, $nom, $activite, $tags, $actvise, $nombreParPage, $page)
	{
		// On déplace la vérification du numéro de page dans cette méthode
		if ($page < 1) {
		throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
		}		
		$qb = $this->createQueryBuilder('u');
		$qb->where('u.id > :id')
		->setParameter('id', '0');
		if(isset($user)){
			$qb->andWhere('u.username LIKE :username');
			$qb->setParameter('username', '%'.$user.'%');
		}
		if(isset($nom)){
			$qb->andWhere('u.nom LIKE :nom');
			$qb->setParameter('nom', '%'.$nom.'%');
		}
		if(isset($activite)){
			$qb->andWhere('u.activite LIKE :activite');
			$qb->setParameter('activite', '%'.$activite.'%');
		}
		if(isset($tags)){
			$qb->andWhere('u.tags LIKE :tags');
			$qb->setParameter('tags', '%'.$tags.'%');
		}
		if(isset($actvise)){
			$qb->andWhere('u.actvise LIKE :actvise');
			$qb->setParameter('actvise', '%'.$actvise.'%');
		}
		$qb->getQuery();
		
		// On définit l'article à partir duquel commencer la liste
		$qb->setFirstResult(($page-1) * $nombreParPage)
		// Ainsi que le nombre d'articles à afficher
		->setMaxResults($nombreParPage);
		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
		// (n'oubliez pas le use correspondant en début de fichier)
		return new Paginator($qb);	
	}

	public function recupfilleuls($user, $nombreParPage, $page)
	{
		// On déplace la vérification du numéro de page dans cette méthode
		if ($page < 1) {
		throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
		}		
		$qb = $this->createQueryBuilder('u');
		$qb->where('u.parrain = :parrain')
		->setParameter('parrain', $user)
		->orderBy('u.id', 'DESC')
		->getQuery();
		
		// On définit l'article à partir duquel commencer la liste
		$qb->setFirstResult(($page-1) * $nombreParPage)
		// Ainsi que le nombre d'articles à afficher
		->setMaxResults($nombreParPage);
		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
		// (n'oubliez pas le use correspondant en début de fichier)
		return new Paginator($qb);	
	}

	public function listuser($societe)
	{
		// On déplace la vérification du numéro de page dans cette méthode
		if ($page < 1) {
		throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
		}		
		$qb = $this->createQueryBuilder('u');
		$qb->where('u.uersociete = :uersociete')
		->setParameter('uersociete', $societe);	
		return $qb->getQuery()->getResult();	
	}
}
